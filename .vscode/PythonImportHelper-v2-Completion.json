[
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "add_placeholder",
        "importPath": "recipes.utils.django_forms",
        "description": "recipes.utils.django_forms",
        "isExtraImport": true,
        "detail": "recipes.utils.django_forms",
        "documentation": {}
    },
    {
        "label": "add_attr",
        "importPath": "recipes.utils.django_forms",
        "description": "recipes.utils.django_forms",
        "isExtraImport": true,
        "detail": "recipes.utils.django_forms",
        "documentation": {}
    },
    {
        "label": "add_attr",
        "importPath": "recipes.utils.django_forms",
        "description": "recipes.utils.django_forms",
        "isExtraImport": true,
        "detail": "recipes.utils.django_forms",
        "documentation": {}
    },
    {
        "label": "add_placeholder",
        "importPath": "recipes.utils.django_forms",
        "description": "recipes.utils.django_forms",
        "isExtraImport": true,
        "detail": "recipes.utils.django_forms",
        "documentation": {}
    },
    {
        "label": "strong_password",
        "importPath": "recipes.utils.django_forms",
        "description": "recipes.utils.django_forms",
        "isExtraImport": true,
        "detail": "recipes.utils.django_forms",
        "documentation": {}
    },
    {
        "label": "add_attr",
        "importPath": "recipes.utils.django_forms",
        "description": "recipes.utils.django_forms",
        "isExtraImport": true,
        "detail": "recipes.utils.django_forms",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "is_positive_number",
        "importPath": "recipes.utils.strings",
        "description": "recipes.utils.strings",
        "isExtraImport": true,
        "detail": "recipes.utils.strings",
        "documentation": {}
    },
    {
        "label": "is_positive_number",
        "importPath": "recipes.utils.strings",
        "description": "recipes.utils.strings",
        "isExtraImport": true,
        "detail": "recipes.utils.strings",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthorCreateRecipeValidator",
        "importPath": "authors.validators",
        "description": "authors.validators",
        "isExtraImport": true,
        "detail": "authors.validators",
        "documentation": {}
    },
    {
        "label": "AuthorCreateRecipeValidator",
        "importPath": "authors.validators",
        "description": "authors.validators",
        "isExtraImport": true,
        "detail": "authors.validators",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "parameterized",
        "importPath": "parameterized",
        "description": "parameterized",
        "isExtraImport": true,
        "detail": "parameterized",
        "documentation": {}
    },
    {
        "label": "parameterized",
        "importPath": "parameterized",
        "description": "parameterized",
        "isExtraImport": true,
        "detail": "parameterized",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "importPath": "authors.forms",
        "description": "authors.forms",
        "isExtraImport": true,
        "detail": "authors.forms",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "authors.forms",
        "description": "authors.forms",
        "isExtraImport": true,
        "detail": "authors.forms",
        "documentation": {}
    },
    {
        "label": "AuthorCreateRecipeForm",
        "importPath": "authors.forms",
        "description": "authors.forms",
        "isExtraImport": true,
        "detail": "authors.forms",
        "documentation": {}
    },
    {
        "label": "AuthorRecipeForm",
        "importPath": "authors.forms",
        "description": "authors.forms",
        "isExtraImport": true,
        "detail": "authors.forms",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "authors.forms",
        "description": "authors.forms",
        "isExtraImport": true,
        "detail": "authors.forms",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "importPath": "authors.forms",
        "description": "authors.forms",
        "isExtraImport": true,
        "detail": "authors.forms",
        "documentation": {}
    },
    {
        "label": "AuthorRecipeForm",
        "importPath": "authors.forms",
        "description": "authors.forms",
        "isExtraImport": true,
        "detail": "authors.forms",
        "documentation": {}
    },
    {
        "label": "AuthorCreateRecipeForm",
        "importPath": "authors.forms",
        "description": "authors.forms",
        "isExtraImport": true,
        "detail": "authors.forms",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_list_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticatedOrReadOnly",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ReadOnlyModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "SimpleRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "SimpleRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "site",
        "importPath": "recipes.views",
        "description": "recipes.views",
        "isExtraImport": true,
        "detail": "recipes.views",
        "documentation": {}
    },
    {
        "label": "site",
        "importPath": "recipes.views",
        "description": "recipes.views",
        "isExtraImport": true,
        "detail": "recipes.views",
        "documentation": {}
    },
    {
        "label": "site",
        "importPath": "recipes.views",
        "description": "recipes.views",
        "isExtraImport": true,
        "detail": "recipes.views",
        "documentation": {}
    },
    {
        "label": "site",
        "importPath": "recipes.views",
        "description": "recipes.views",
        "isExtraImport": true,
        "detail": "recipes.views",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choices",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "SystemRandom",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "make_pagination_range",
        "importPath": "recipes.utils.pagination",
        "description": "recipes.utils.pagination",
        "isExtraImport": true,
        "detail": "recipes.utils.pagination",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "IsOwner",
        "importPath": "recipes.permissions",
        "description": "recipes.permissions",
        "isExtraImport": true,
        "detail": "recipes.permissions",
        "documentation": {}
    },
    {
        "label": "RecipeSerializer",
        "importPath": "recipes.serializers",
        "description": "recipes.serializers",
        "isExtraImport": true,
        "detail": "recipes.serializers",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "Concat",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenVerifyView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "recipes",
        "description": "recipes",
        "isExtraImport": true,
        "detail": "recipes",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "authors.forms.login",
        "description": "authors.forms.login",
        "peekOfCode": "class LoginForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        add_placeholder(self.fields[\"username\"], \"Type your username\")\n        add_placeholder(self.fields[\"password\"], \"Type your password\")\n    username = forms.CharField()\n    password = forms.CharField(widget=forms.PasswordInput())",
        "detail": "authors.forms.login",
        "documentation": {}
    },
    {
        "label": "AuthorCreateRecipeForm",
        "kind": 6,
        "importPath": "authors.forms.recipe_create_form",
        "description": "authors.forms.recipe_create_form",
        "peekOfCode": "class AuthorCreateRecipeForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._recipe_create_errors = defaultdict(list)\n        add_attr(self.fields.get(\"preparation_step\"), \"class\", \"span-2\")\n        add_attr(self.fields.get(\"cover\"), \"class\", \"span-2\")\n    class Meta:\n        model = Recipe\n        fields = (\n            \"title\",",
        "detail": "authors.forms.recipe_create_form",
        "documentation": {}
    },
    {
        "label": "AuthorRecipeForm",
        "kind": 6,
        "importPath": "authors.forms.recipe_form",
        "description": "authors.forms.recipe_form",
        "peekOfCode": "class AuthorRecipeForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        add_attr(self.fields.get(\"preparation_step\"), \"class\", \"span-2\")\n        add_attr(self.fields.get(\"cover\"), \"class\", \"span-2\")\n    class Meta:\n        model = Recipe\n        fields = (\n            \"title\",\n            \"description\",",
        "detail": "authors.forms.recipe_form",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "kind": 6,
        "importPath": "authors.forms.register",
        "description": "authors.forms.register",
        "peekOfCode": "class RegisterForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        add_placeholder(self.fields[\"username\"], \"Your username\")\n        add_placeholder(self.fields[\"email\"], \"Ex: your_best_email@email.com\")\n        add_placeholder(self.fields[\"first_name\"], \"Ex: John / Jane\")\n        add_placeholder(self.fields[\"last_name\"], \"Ex: Doe\")\n    first_name = forms.CharField(\n        error_messages={\"required\": \"Type your First Name\"},\n        required=True,",
        "detail": "authors.forms.register",
        "documentation": {}
    },
    {
        "label": "AuthorRegisterFormUnitTest",
        "kind": 6,
        "importPath": "authors.tests.test_author_register_form",
        "description": "authors.tests.test_author_register_form",
        "peekOfCode": "class AuthorRegisterFormUnitTest(TestCase):\n    @parameterized.expand(\n        [\n            (\"username\", \"Your username\"),\n            (\"email\", \"Ex: your_best_email@email.com\"),\n            (\"first_name\", \"Ex: John / Jane\"),\n            (\"last_name\", \"Ex: Doe\"),\n            (\"password\", \"Your password\"),\n            (\"confirm_password\", \"Confirm your password\"),\n        ]",
        "detail": "authors.tests.test_author_register_form",
        "documentation": {}
    },
    {
        "label": "AuthorRegisterFormIntegrationTest",
        "kind": 6,
        "importPath": "authors.tests.test_author_register_form",
        "description": "authors.tests.test_author_register_form",
        "peekOfCode": "class AuthorRegisterFormIntegrationTest(DjangoTestCase):\n    def setUp(self) -> None:\n        self.form_data = {\n            \"username\": \"user\",\n            \"first_name\": \"First\",\n            \"last_name\": \"Last\",\n            \"email\": \"mail@mail.com\",\n            \"password\": \"StrongP@ssword1\",\n            \"confirm_password\": \"StrongP@ssword1\",\n        }",
        "detail": "authors.tests.test_author_register_form",
        "documentation": {}
    },
    {
        "label": "register_view",
        "kind": 2,
        "importPath": "authors.views.all",
        "description": "authors.views.all",
        "peekOfCode": "def register_view(request):\n    \"\"\"\n    This view is responsible for rendering an empty form when in GET mode and\n    receiving the register_form_data in the register redirection  create view.\n    \"\"\"\n    title = \"Authors | Register\"\n    register_form_data = request.session.get(\"register_form_data\", None)\n    form = RegisterForm(register_form_data)\n    return render(\n        request, \"authors/pages/register_view.html\", {\"form\": form, \"title\": title}",
        "detail": "authors.views.all",
        "documentation": {}
    },
    {
        "label": "register_create",
        "kind": 2,
        "importPath": "authors.views.all",
        "description": "authors.views.all",
        "peekOfCode": "def register_create(request):\n    \"\"\"\n    This view will log the new user or throw an error if something is wrong.\n    Redirect to register_view to disallow resubmit of the form.\n    \"\"\"\n    if not request.POST:\n        raise Http404()\n    POST = request.POST\n    request.session[\"register_form_data\"] = POST\n    form = RegisterForm(POST)",
        "detail": "authors.views.all",
        "documentation": {}
    },
    {
        "label": "login_view",
        "kind": 2,
        "importPath": "authors.views.all",
        "description": "authors.views.all",
        "peekOfCode": "def login_view(request):\n    title = \"Authors | Login\"\n    form = LoginForm()\n    return render(\n        request,\n        \"authors/pages/login.html\",\n        {\n            \"title\": title,\n            \"form\": form,\n            \"is_login_page\": True,",
        "detail": "authors.views.all",
        "documentation": {}
    },
    {
        "label": "login_create",
        "kind": 2,
        "importPath": "authors.views.all",
        "description": "authors.views.all",
        "peekOfCode": "def login_create(request):\n    \"\"\"\n    This view makes the authentication logic and redirect de user for login_view with\n    appropriate messages of success or failed.\n    \"\"\"\n    if not request.POST:\n        raise Http404()\n    form = LoginForm(request.POST)\n    if form.is_valid():\n        authenticated_user = authenticate(",
        "detail": "authors.views.all",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "authors.views.all",
        "description": "authors.views.all",
        "peekOfCode": "def logout_view(request):\n    \"\"\"\n    View wich contains the logout logical and messages. Redirect the user back for login view.\n    \"\"\"\n    if not request.POST:\n        return redirect(reverse(\"authors:login\"))\n    messages.success(request, \"Logged out successfully\")\n    logout(request)\n    return redirect(reverse(\"authors:login\"))\n@login_required(login_url=\"authors:login\", redirect_field_name=\"next\")",
        "detail": "authors.views.all",
        "documentation": {}
    },
    {
        "label": "dashboard_view",
        "kind": 2,
        "importPath": "authors.views.all",
        "description": "authors.views.all",
        "peekOfCode": "def dashboard_view(request):\n    \"\"\"\n    This view lists the author´s recipes.\n    \"\"\"\n    title = \"Authors | Dashboard\"\n    recipes = Recipe.objects.filter(\n        is_published=False,\n        author=request.user,\n    )\n    return render(",
        "detail": "authors.views.all",
        "documentation": {}
    },
    {
        "label": "AuthorViewSet",
        "kind": 6,
        "importPath": "authors.views.api",
        "description": "authors.views.api",
        "peekOfCode": "class AuthorViewSet(ReadOnlyModelViewSet):\n    serializer_class = AuthorSerializer\n    permission_classes = [\n        IsAuthenticated,\n    ]\n    http_method_names = [\"get\"]\n    def get_queryset(self):\n        user = get_user_model()\n        queryset = user.objects.filter(username=self.request.user.username)\n        return queryset",
        "detail": "authors.views.api",
        "documentation": {}
    },
    {
        "label": "DashboardRecipe",
        "kind": 6,
        "importPath": "authors.views.dashboard_recipe",
        "description": "authors.views.dashboard_recipe",
        "peekOfCode": "class DashboardRecipe(View):\n    def render_recipe(self, form, title, recipe, is_dashboard):\n        return render(\n            self.request,\n            \"authors/pages/dashboard_recipe.html\",\n            context={\n                \"title\": title,\n                \"recipe\": recipe,\n                \"form\": form,\n                \"is_dashboard_page\": is_dashboard,",
        "detail": "authors.views.dashboard_recipe",
        "documentation": {}
    },
    {
        "label": "DashboardRecipeDelete",
        "kind": 6,
        "importPath": "authors.views.dashboard_recipe",
        "description": "authors.views.dashboard_recipe",
        "peekOfCode": "class DashboardRecipeDelete(DashboardRecipe):\n    def post(self, *args, **kwargs):\n        recipe = self.get_recipe(self.request.POST.get(\"id\"))\n        recipe.delete()\n        messages.success(self.request, \"Deleted successfully\")\n        return redirect(\"authors:dashboard\")",
        "detail": "authors.views.dashboard_recipe",
        "documentation": {}
    },
    {
        "label": "AuthorsConfig",
        "kind": 6,
        "importPath": "authors.apps",
        "description": "authors.apps",
        "peekOfCode": "class AuthorsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"authors\"",
        "detail": "authors.apps",
        "documentation": {}
    },
    {
        "label": "AuthorSerializer",
        "kind": 6,
        "importPath": "authors.serializers",
        "description": "authors.serializers",
        "peekOfCode": "class AuthorSerializer(ModelSerializer):\n    class Meta:\n        model = get_user_model()\n        fields = [\"id\", \"username\", \"first_name\", \"email\", \"last_name\"]",
        "detail": "authors.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "authors.urls",
        "description": "authors.urls",
        "peekOfCode": "app_name = \"authors\"\nauthor_api_router = SimpleRouter()\nauthor_api_router.register(\"api\", views.AuthorViewSet, basename=\"author-api\")\nurlpatterns = [\n    path(\"register/\", views.register_view, name=\"register\"),\n    path(\"register/create/\", views.register_create, name=\"register_create\"),\n    path(\"login/\", views.login_view, name=\"login\"),\n    path(\"login/create/\", views.login_create, name=\"login_create\"),\n    path(\"logout/\", views.logout_view, name=\"logout\"),\n    path(\"dashboard/\", views.dashboard_view, name=\"dashboard\"),",
        "detail": "authors.urls",
        "documentation": {}
    },
    {
        "label": "author_api_router",
        "kind": 5,
        "importPath": "authors.urls",
        "description": "authors.urls",
        "peekOfCode": "author_api_router = SimpleRouter()\nauthor_api_router.register(\"api\", views.AuthorViewSet, basename=\"author-api\")\nurlpatterns = [\n    path(\"register/\", views.register_view, name=\"register\"),\n    path(\"register/create/\", views.register_create, name=\"register_create\"),\n    path(\"login/\", views.login_view, name=\"login\"),\n    path(\"login/create/\", views.login_create, name=\"login_create\"),\n    path(\"logout/\", views.logout_view, name=\"logout\"),\n    path(\"dashboard/\", views.dashboard_view, name=\"dashboard\"),\n    path(",
        "detail": "authors.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "authors.urls",
        "description": "authors.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"register/\", views.register_view, name=\"register\"),\n    path(\"register/create/\", views.register_create, name=\"register_create\"),\n    path(\"login/\", views.login_view, name=\"login\"),\n    path(\"login/create/\", views.login_create, name=\"login_create\"),\n    path(\"logout/\", views.logout_view, name=\"logout\"),\n    path(\"dashboard/\", views.dashboard_view, name=\"dashboard\"),\n    path(\n        \"dashboard/recipe/create\",\n        views.DashboardRecipe.as_view(),",
        "detail": "authors.urls",
        "documentation": {}
    },
    {
        "label": "AuthorCreateRecipeValidator",
        "kind": 6,
        "importPath": "authors.validators",
        "description": "authors.validators",
        "peekOfCode": "class AuthorCreateRecipeValidator:\n    def __init__(self, data, errors=None, error_class=None):\n        self.errors = defaultdict(list) if errors is None else errors\n        self.error_class = ValidationError if error_class is None else error_class\n        self.data = data\n        self.clean()\n        model = Recipe\n        fields = (\n            \"title\",\n            \"description\",",
        "detail": "authors.validators",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "core.asgi",
        "description": "core.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "core.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get(\"SECRET_KEY\", \"INSECURE\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True if os.environ.get(\"DEBUG\") == \"1\" else False\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get(\"SECRET_KEY\", \"INSECURE\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True if os.environ.get(\"DEBUG\") == \"1\" else False\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "DEBUG = True if os.environ.get(\"DEBUG\") == \"1\" else False\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    # apps",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    # apps\n    \"recipes.apps.RecipesConfig\",\n    \"authors.apps.AuthorsConfig\",",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"debug_toolbar.middleware.DebugToolbarMiddleware\",\n]",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "ROOT_URLCONF = \"core.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "WSGI_APPLICATION = \"core.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": os.environ.get(\"DB_NAME\"),\n        \"USER\": os.environ.get(\"DB_USER\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\"),\n        \"HOST\": \"localhost\",",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": os.environ.get(\"DB_NAME\"),\n        \"USER\": os.environ.get(\"DB_USER\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\"),\n        \"HOST\": \"localhost\",\n        \"PORT\": \"5432\",\n    }\n}",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\n# Default primary key field type",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nDEBUG_TOOLBAR_CONFIG = {\n    \"SHOW_TOOLBAR_CALLBACK\": lambda request: True,\n}",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / \"static\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nDEBUG_TOOLBAR_CONFIG = {\n    \"SHOW_TOOLBAR_CALLBACK\": lambda request: True,\n}\nINTERNAL_IPS = [",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nDEBUG_TOOLBAR_CONFIG = {\n    \"SHOW_TOOLBAR_CALLBACK\": lambda request: True,\n}\nINTERNAL_IPS = [\n    \"127.0.0.1\",",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / \"media\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nDEBUG_TOOLBAR_CONFIG = {\n    \"SHOW_TOOLBAR_CALLBACK\": lambda request: True,\n}\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nDEBUG_TOOLBAR_CONFIG = {\n    \"SHOW_TOOLBAR_CALLBACK\": lambda request: True,\n}\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]\nREST_FRAMEWORK = {\n    \"DEFAULT_PAGINATION_CLASS\": \"rest_framework.pagination.LimitOffsetPagination\",\n    \"PAGE_SIZE\": 10,",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG_TOOLBAR_CONFIG",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "DEBUG_TOOLBAR_CONFIG = {\n    \"SHOW_TOOLBAR_CALLBACK\": lambda request: True,\n}\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]\nREST_FRAMEWORK = {\n    \"DEFAULT_PAGINATION_CLASS\": \"rest_framework.pagination.LimitOffsetPagination\",\n    \"PAGE_SIZE\": 10,\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IPS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "INTERNAL_IPS = [\n    \"127.0.0.1\",\n]\nREST_FRAMEWORK = {\n    \"DEFAULT_PAGINATION_CLASS\": \"rest_framework.pagination.LimitOffsetPagination\",\n    \"PAGE_SIZE\": 10,\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n    ),\n}",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"DEFAULT_PAGINATION_CLASS\": \"rest_framework.pagination.LimitOffsetPagination\",\n    \"PAGE_SIZE\": 10,\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n    ),\n}\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=60),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=1),",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=60),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=1),\n    \"ROTATE_REFRESH_TOKENS\": False,\n    \"BLACKLIST_AFTER_ROTATION\": False,\n    \"SIGNING_KEY\": os.environ.get(\"SECRET_KEY_JWT\", \"INSECURE\"),\n    \"AUTH_HEADER_TYPES\": (\"Bearer\",),\n    # \"UPDATE_LAST_LOGIN\": False,\n    # \"ALGORITHM\": \"HS256\",\n    # \"VERIFYING_KEY\": \"\",",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.urls",
        "description": "core.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"recipes.urls\")),\n    path(\"authors/\", include(\"authors.urls\")),\n    path(\"__debug__/\", include(\"debug_toolbar.urls\")),\n]\nurlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\nurlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)",
        "detail": "core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "core.wsgi",
        "description": "core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "core.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "recipes.migrations.0001_initial",
        "description": "recipes.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Category\",\n            fields=[\n                (",
        "detail": "recipes.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "recipes.migrations.0002_alter_recipe_category_alter_recipe_cover_and_more",
        "description": "recipes.migrations.0002_alter_recipe_category_alter_recipe_cover_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"recipes\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"recipe\",\n            name=\"category\",\n            field=models.ForeignKey(\n                blank=True,",
        "detail": "recipes.migrations.0002_alter_recipe_category_alter_recipe_cover_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "recipes.migrations.0003_alter_recipe_cover",
        "description": "recipes.migrations.0003_alter_recipe_cover",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"recipes\", \"0002_alter_recipe_category_alter_recipe_cover_and_more\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"recipe\",\n            name=\"cover\",\n            field=models.ImageField(upload_to=\"recipes/covers/%Y/%m/%d/\"),\n        ),",
        "detail": "recipes.migrations.0003_alter_recipe_cover",
        "documentation": {}
    },
    {
        "label": "RecipeTestBase",
        "kind": 6,
        "importPath": "recipes.tests.recipe_base_test",
        "description": "recipes.tests.recipe_base_test",
        "peekOfCode": "class RecipeTestBase(TestCase):\n    def setUp(self) -> None:\n        self.id_category = 1\n        self.category_url = reverse(\n            \"recipes:category\", kwargs={\"category_id\": self.id_category}\n        )\n        self.home_url = reverse(\"recipes:home\")\n        self.response_home = self.client.get(self.home_url)\n        self.response_category = self.client.get(self.category_url)\n        self.search_url = reverse(\"recipes:search\")",
        "detail": "recipes.tests.recipe_base_test",
        "documentation": {}
    },
    {
        "label": "RecipeModelTest",
        "kind": 6,
        "importPath": "recipes.tests.test_recipe_models",
        "description": "recipes.tests.test_recipe_models",
        "peekOfCode": "class RecipeModelTest(RecipeTestBase):\n    def setUp(self) -> None:\n        self.recipe = self.make_recipe()\n        return super().setUp()\n    def make_recipe_no_default(self):\n        recipe = Recipe(\n            category=self.make_recipe_category(name=\"Test new Category\"),\n            author=self.make_recipe_author(username=\"newuser\"),\n            title=\"some title\",\n            description=\"some description\",",
        "detail": "recipes.tests.test_recipe_models",
        "documentation": {}
    },
    {
        "label": "RecipesURLsTest",
        "kind": 6,
        "importPath": "recipes.tests.test_recipe_url",
        "description": "recipes.tests.test_recipe_url",
        "peekOfCode": "class RecipesURLsTest(TestCase):\n    def setUp(self):\n        self.id_category = 1\n        self.category_url = reverse(\n            \"recipes:category\", kwargs={\"category_id\": self.id_category}\n        )\n    def test_recipe_home_url_is_correct(self):\n        \"\"\"\n        Test must confirm wich url its been resolve for home\n        \"\"\"",
        "detail": "recipes.tests.test_recipe_url",
        "documentation": {}
    },
    {
        "label": "RecipeCategoryViewsTest",
        "kind": 6,
        "importPath": "recipes.tests.test_recipes_category_views",
        "description": "recipes.tests.test_recipes_category_views",
        "peekOfCode": "class RecipeCategoryViewsTest(RecipeTestBase):\n    def test_recipe_category_view_function(self):\n        \"\"\"\n        Test must confirm if the correct view has been executed in category url\n        \"\"\"\n        view = resolve(reverse(\"recipes:category\", kwargs={\"category_id\": 1000}))\n        self.assertIs(view.func.view_class, site.RecipesListCategory)\n    def test_recipe_category_template_loads_the_correct_recipe(self):\n        \"\"\"\n        Tests if the title is in html in the category url template",
        "detail": "recipes.tests.test_recipes_category_views",
        "documentation": {}
    },
    {
        "label": "RecipeDetailViewsTest",
        "kind": 6,
        "importPath": "recipes.tests.test_recipes_detail_view",
        "description": "recipes.tests.test_recipes_detail_view",
        "peekOfCode": "class RecipeDetailViewsTest(RecipeTestBase):\n    def test_recipe_view_function(self):\n        \"\"\"\n        Test must confirm if the correct view has been executed in recipe url\n        \"\"\"\n        view = resolve(reverse(\"recipes:recipe\", kwargs={\"pk\": 2}))\n        self.assertIs(view.func.view_class, site.RecipeDetailView)\n    def test_recipe_view_return_404_if_not_recipes_found(self):\n        \"\"\"\n        Tests if recipe url returns a 'not found' status code when",
        "detail": "recipes.tests.test_recipes_detail_view",
        "documentation": {}
    },
    {
        "label": "RecipeHomeViewsTest",
        "kind": 6,
        "importPath": "recipes.tests.test_recipes_home_view",
        "description": "recipes.tests.test_recipes_home_view",
        "peekOfCode": "class RecipeHomeViewsTest(RecipeTestBase):\n    def test_home_view_render_correct_template(self):\n        \"\"\"\n        Tests if home url render the correct template\n        \"\"\"\n        self.assertTemplateUsed(self.response_home, \"recipes/pages/home.html\")\n    def test_recipe_home_view_with_no_recipes_found(self):\n        \"\"\"\n        Tests if no recipes message appears in home page when there are not\n        recipes to show",
        "detail": "recipes.tests.test_recipes_home_view",
        "documentation": {}
    },
    {
        "label": "RecipeSearchViewsTest",
        "kind": 6,
        "importPath": "recipes.tests.test_recipes_search_view",
        "description": "recipes.tests.test_recipes_search_view",
        "peekOfCode": "class RecipeSearchViewsTest(RecipeTestBase):\n    def test_recipe_search_view_function(self):\n        \"\"\"\n        Test must confirm if the correct view has been executed in search url\n        \"\"\"\n        view = resolve(self.search_url)\n        self.assertIs(view.func.view_class, site.RecipesListSearch)\n    def test_search_view_render_correct_template(self):\n        \"\"\"\n        Tests if search url render the correct template",
        "detail": "recipes.tests.test_recipes_search_view",
        "documentation": {}
    },
    {
        "label": "add_attr",
        "kind": 2,
        "importPath": "recipes.utils.django_forms",
        "description": "recipes.utils.django_forms",
        "peekOfCode": "def add_attr(field, attr_name, attr_new_value):\n    existing_attr = field.widget.attrs.get(attr_name, \"\")\n    field.widget.attrs[attr_name] = f\"{existing_attr} {attr_new_value}\".strip()\ndef add_placeholder(field, placeholder_value):\n    field.widget.attrs[\"placeholder\"] = placeholder_value\ndef strong_password(password):\n    regex = re.compile(r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$\")\n    if not regex.match(password):\n        raise ValidationError(\n            (",
        "detail": "recipes.utils.django_forms",
        "documentation": {}
    },
    {
        "label": "add_placeholder",
        "kind": 2,
        "importPath": "recipes.utils.django_forms",
        "description": "recipes.utils.django_forms",
        "peekOfCode": "def add_placeholder(field, placeholder_value):\n    field.widget.attrs[\"placeholder\"] = placeholder_value\ndef strong_password(password):\n    regex = re.compile(r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$\")\n    if not regex.match(password):\n        raise ValidationError(\n            (\n                \"Password must have at least one uppercase letter,\"\n                \"one lowercase letter and one number. The length should be\"\n                \"at least 8 characters\"",
        "detail": "recipes.utils.django_forms",
        "documentation": {}
    },
    {
        "label": "strong_password",
        "kind": 2,
        "importPath": "recipes.utils.django_forms",
        "description": "recipes.utils.django_forms",
        "peekOfCode": "def strong_password(password):\n    regex = re.compile(r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$\")\n    if not regex.match(password):\n        raise ValidationError(\n            (\n                \"Password must have at least one uppercase letter,\"\n                \"one lowercase letter and one number. The length should be\"\n                \"at least 8 characters\"\n            ),\n            code=\"invalid\",",
        "detail": "recipes.utils.django_forms",
        "documentation": {}
    },
    {
        "label": "rand_ratio",
        "kind": 2,
        "importPath": "recipes.utils.factory",
        "description": "recipes.utils.factory",
        "peekOfCode": "def rand_ratio():\n    return randint(840, 900), randint(473, 573)\nfake = Faker(\"pt-BR\")\ndef make_recipe():\n    return {\n        \"id\": fake.unique.random_number(digits=3, fix_len=True),\n        \"title\": fake.sentence(nb_words=6),\n        \"description\": fake.sentence(nb_words=12),\n        \"preparation_time\": fake.random_number(digits=2, fix_len=True),\n        \"preparation_time_unit\": \"Minutos\",",
        "detail": "recipes.utils.factory",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "kind": 2,
        "importPath": "recipes.utils.factory",
        "description": "recipes.utils.factory",
        "peekOfCode": "def make_recipe():\n    return {\n        \"id\": fake.unique.random_number(digits=3, fix_len=True),\n        \"title\": fake.sentence(nb_words=6),\n        \"description\": fake.sentence(nb_words=12),\n        \"preparation_time\": fake.random_number(digits=2, fix_len=True),\n        \"preparation_time_unit\": \"Minutos\",\n        \"servings\": fake.random_number(digits=2, fix_len=True),\n        \"servings_unit\": \"Porções\",\n        \"preparation_steps\": fake.text(3000),",
        "detail": "recipes.utils.factory",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "recipes.utils.factory",
        "description": "recipes.utils.factory",
        "peekOfCode": "fake = Faker(\"pt-BR\")\ndef make_recipe():\n    return {\n        \"id\": fake.unique.random_number(digits=3, fix_len=True),\n        \"title\": fake.sentence(nb_words=6),\n        \"description\": fake.sentence(nb_words=12),\n        \"preparation_time\": fake.random_number(digits=2, fix_len=True),\n        \"preparation_time_unit\": \"Minutos\",\n        \"servings\": fake.random_number(digits=2, fix_len=True),\n        \"servings_unit\": \"Porções\",",
        "detail": "recipes.utils.factory",
        "documentation": {}
    },
    {
        "label": "make_pagination_range",
        "kind": 2,
        "importPath": "recipes.utils.pagination",
        "description": "recipes.utils.pagination",
        "peekOfCode": "def make_pagination_range(\n    page_range,\n    qt_pages,\n    current_page,\n):\n    middle_range = math.ceil(qt_pages / 2)\n    start_range = current_page - middle_range\n    stop_range = current_page + middle_range\n    total_pages = len(page_range)\n    start_range_offset = abs(start_range) if start_range < 0 else 0",
        "detail": "recipes.utils.pagination",
        "documentation": {}
    },
    {
        "label": "make_pagination",
        "kind": 2,
        "importPath": "recipes.utils.pagination",
        "description": "recipes.utils.pagination",
        "peekOfCode": "def make_pagination(request, queryset, per_page, qt_pages=4):\n    try:\n        current_page = int(request.GET.get(\"page\", 1))\n    except ValueError:\n        current_page = 1\n    paginator = Paginator(queryset, per_page)\n    page_object = paginator.get_page(current_page)\n    pagination_range = make_pagination_range(\n        paginator.page_range, qt_pages, current_page\n    )",
        "detail": "recipes.utils.pagination",
        "documentation": {}
    },
    {
        "label": "is_positive_number",
        "kind": 2,
        "importPath": "recipes.utils.strings",
        "description": "recipes.utils.strings",
        "peekOfCode": "def is_positive_number(value):\n    try:\n        number_string = float(value)\n    except (ValueError, TypeError):\n        return False\n    return number_string > 0",
        "detail": "recipes.utils.strings",
        "documentation": {}
    },
    {
        "label": "PaginationTest",
        "kind": 6,
        "importPath": "recipes.utils.test_pagination",
        "description": "recipes.utils.test_pagination",
        "peekOfCode": "class PaginationTest(TestCase):\n    def test_make_pagination_range_returns_a_pagination_range(self):\n        pagination = make_pagination_range(\n            page_range=list(range(1, 21)),\n            qt_pages=4,\n            current_page=2,\n        )[\"pagination\"]\n        self.assertEqual([1, 2, 3, 4], pagination)\n    def test_first_range_is_static_if_current_page_is_less_than_middle_page(\n        self,",
        "detail": "recipes.utils.test_pagination",
        "documentation": {}
    },
    {
        "label": "RecipeAPIv1Pagination",
        "kind": 6,
        "importPath": "recipes.views.api",
        "description": "recipes.views.api",
        "peekOfCode": "class RecipeAPIv1Pagination(PageNumberPagination):\n    page_size = 3\nclass RecipeAPIv1ViewSet(ModelViewSet):\n    queryset = Recipe.objects.get_published()\n    serializer_class = RecipeSerializer\n    pagination_class = RecipeAPIv1Pagination\n    permission_classes = [\n        IsAuthenticatedOrReadOnly,\n    ]\n    http_method_names = [\"get\", \"options\", \"head\", \"patch\", \"post\", \"delete\"]",
        "detail": "recipes.views.api",
        "documentation": {}
    },
    {
        "label": "RecipeAPIv1ViewSet",
        "kind": 6,
        "importPath": "recipes.views.api",
        "description": "recipes.views.api",
        "peekOfCode": "class RecipeAPIv1ViewSet(ModelViewSet):\n    queryset = Recipe.objects.get_published()\n    serializer_class = RecipeSerializer\n    pagination_class = RecipeAPIv1Pagination\n    permission_classes = [\n        IsAuthenticatedOrReadOnly,\n    ]\n    http_method_names = [\"get\", \"options\", \"head\", \"patch\", \"post\", \"delete\"]\n    def get_queryset(self):\n        queryset = super().get_queryset()",
        "detail": "recipes.views.api",
        "documentation": {}
    },
    {
        "label": "RecipesListViewBase",
        "kind": 6,
        "importPath": "recipes.views.site",
        "description": "recipes.views.site",
        "peekOfCode": "class RecipesListViewBase(ListView):\n    model = Recipe\n    context_object_name = \"recipes\"\n    paginate_by = None\n    ordering = [\"-id\"]\n    template_name = \"recipes/pages/home.html\"\n    def get_queryset(self, *args, **kwargs):\n        query_set = super().get_queryset(*args, **kwargs)\n        query_set = query_set.filter(\n            is_published=True,",
        "detail": "recipes.views.site",
        "documentation": {}
    },
    {
        "label": "RecipesListViewHome",
        "kind": 6,
        "importPath": "recipes.views.site",
        "description": "recipes.views.site",
        "peekOfCode": "class RecipesListViewHome(RecipesListViewBase):\n    def get_context_data(self, *args, **kwargs):\n        context = super().get_context_data(*args, **kwargs)\n        title = \"Home | Recipes\"\n        context.update({\"title\": title})\n        return context\nclass RecipeDetailView(DetailView):\n    model = Recipe\n    context_object_name = \"recipe\"\n    template_name = \"recipes/pages/recipe_detail.html\"",
        "detail": "recipes.views.site",
        "documentation": {}
    },
    {
        "label": "RecipeDetailView",
        "kind": 6,
        "importPath": "recipes.views.site",
        "description": "recipes.views.site",
        "peekOfCode": "class RecipeDetailView(DetailView):\n    model = Recipe\n    context_object_name = \"recipe\"\n    template_name = \"recipes/pages/recipe_detail.html\"\n    def get_queryset(self, *args, **kwargs):\n        query_set = super().get_queryset(*args, **kwargs)\n        query_set = query_set.filter(is_published=True)\n        return query_set\n    def get_context_data(self, *args, **kwargs):\n        context = super().get_context_data(*args, **kwargs)",
        "detail": "recipes.views.site",
        "documentation": {}
    },
    {
        "label": "RecipesListCategory",
        "kind": 6,
        "importPath": "recipes.views.site",
        "description": "recipes.views.site",
        "peekOfCode": "class RecipesListCategory(RecipesListViewBase):\n    template_name = \"recipes/pages/category.html\"\n    def get_queryset(self, *args, **kwargs):\n        query_set = super().get_queryset(*args, **kwargs)\n        query_set.filter(category__id=self.kwargs.get(\"category_id\"))\n        return query_set\n    def get_context_data(self, *args, **kwargs):\n        context = super().get_context_data(*args, **kwargs)\n        recipes = get_list_or_404(\n            Recipe.objects.filter(category__id=self.kwargs.get(\"category_id\")).order_by(",
        "detail": "recipes.views.site",
        "documentation": {}
    },
    {
        "label": "RecipesListSearch",
        "kind": 6,
        "importPath": "recipes.views.site",
        "description": "recipes.views.site",
        "peekOfCode": "class RecipesListSearch(RecipesListViewBase):\n    template_name = \"recipes/pages/search_page.html\"\n    def get_queryset(self, *args, **kwargs):\n        search_term = self.request.GET.get(\"q\", \"\").strip()\n        if not search_term:\n            raise Http404()\n        query_set = super().get_queryset(*args, **kwargs)\n        query_set = query_set.filter(\n            Q(Q(title__icontains=search_term) | Q(description__icontains=search_term))\n        ).order_by(\"-id\")",
        "detail": "recipes.views.site",
        "documentation": {}
    },
    {
        "label": "PER_PAGES",
        "kind": 5,
        "importPath": "recipes.views.site",
        "description": "recipes.views.site",
        "peekOfCode": "PER_PAGES = int(os.environ.get(\"PER_PAGE\", 6))\nclass RecipesListViewBase(ListView):\n    model = Recipe\n    context_object_name = \"recipes\"\n    paginate_by = None\n    ordering = [\"-id\"]\n    template_name = \"recipes/pages/home.html\"\n    def get_queryset(self, *args, **kwargs):\n        query_set = super().get_queryset(*args, **kwargs)\n        query_set = query_set.filter(",
        "detail": "recipes.views.site",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "recipes.admin",
        "description": "recipes.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    ...\nclass RecipeAdmin(admin.ModelAdmin):\n    list_display = [\"id\", \"title\", \"is_published\", \"created_at\"]\n    list_display_links = [\"title\"]\n    search_fields = [\"id\", \"title\", \"description\", \"slug\"]\n    list_filter = [\"category\", \"author\", \"is_published\", \"preparation_step_is_html\"]\n    list_per_page = 10\n    list_editable = [\"is_published\"]\n    ordering = (\"-id\",)",
        "detail": "recipes.admin",
        "documentation": {}
    },
    {
        "label": "RecipeAdmin",
        "kind": 6,
        "importPath": "recipes.admin",
        "description": "recipes.admin",
        "peekOfCode": "class RecipeAdmin(admin.ModelAdmin):\n    list_display = [\"id\", \"title\", \"is_published\", \"created_at\"]\n    list_display_links = [\"title\"]\n    search_fields = [\"id\", \"title\", \"description\", \"slug\"]\n    list_filter = [\"category\", \"author\", \"is_published\", \"preparation_step_is_html\"]\n    list_per_page = 10\n    list_editable = [\"is_published\"]\n    ordering = (\"-id\",)\n    prepopulated_fields = {\"slug\": (\"title\",)}\nadmin.site.register(models.Category, CategoryAdmin)",
        "detail": "recipes.admin",
        "documentation": {}
    },
    {
        "label": "RecipesConfig",
        "kind": 6,
        "importPath": "recipes.apps",
        "description": "recipes.apps",
        "peekOfCode": "class RecipesConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"recipes\"",
        "detail": "recipes.apps",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "recipes.models",
        "description": "recipes.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField(max_length=65)\n    def __str__(self):\n        return self.name\nclass RecipeManager(models.Manager):\n    def get_published(self):\n        return (\n            self.filter(is_published=True)\n            .annotate(\n                author_full_name=Concat(",
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "RecipeManager",
        "kind": 6,
        "importPath": "recipes.models",
        "description": "recipes.models",
        "peekOfCode": "class RecipeManager(models.Manager):\n    def get_published(self):\n        return (\n            self.filter(is_published=True)\n            .annotate(\n                author_full_name=Concat(\n                    F(\"author__first_name\"),\n                    Value(\" \"),\n                    F(\"author__last_name\"),\n                    Value(\" (\"),",
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "kind": 6,
        "importPath": "recipes.models",
        "description": "recipes.models",
        "peekOfCode": "class Recipe(models.Model):\n    objects = RecipeManager()\n    title = models.CharField(max_length=65)\n    description = models.CharField(max_length=165)\n    slug = models.SlugField(unique=True)\n    preparation_time = models.IntegerField()\n    # TODO arrumar o nome do field abaixo: prepAration\n    preperation_time_unit = models.CharField(max_length=10)\n    servings = models.IntegerField()\n    servings_unit = models.CharField(max_length=10)",
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "IsOwner",
        "kind": 6,
        "importPath": "recipes.permissions",
        "description": "recipes.permissions",
        "peekOfCode": "class IsOwner(permissions.BasePermission):\n    \"\"\"\n    This class verifies if the user is owner of the account to have\n    acess to specific actions like create, update or delete a recipe.\n    \"\"\"\n    def has_object_permission(self, request, view, obj):\n        return obj.author == request.user",
        "detail": "recipes.permissions",
        "documentation": {}
    },
    {
        "label": "RecipeSerializer",
        "kind": 6,
        "importPath": "recipes.serializers",
        "description": "recipes.serializers",
        "peekOfCode": "class RecipeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Recipe\n        fields = [\n            \"id\",\n            \"title\",\n            \"description\",\n            \"category_name\",\n            \"author\",\n            \"public\",",
        "detail": "recipes.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "recipes.urls",
        "description": "recipes.urls",
        "peekOfCode": "app_name = \"recipes\"\nrecipes_api_v1_router = SimpleRouter()\nrecipes_api_v1_router.register(\n    \"recipes/api/v1\",\n    views.RecipeAPIv1ViewSet,\n)\nurlpatterns = [\n    path(\"\", views.RecipesListViewHome.as_view(), name=\"home\"),\n    path(\"recipes/search/\", views.RecipesListSearch.as_view(), name=\"search\"),\n    path(",
        "detail": "recipes.urls",
        "documentation": {}
    },
    {
        "label": "recipes_api_v1_router",
        "kind": 5,
        "importPath": "recipes.urls",
        "description": "recipes.urls",
        "peekOfCode": "recipes_api_v1_router = SimpleRouter()\nrecipes_api_v1_router.register(\n    \"recipes/api/v1\",\n    views.RecipeAPIv1ViewSet,\n)\nurlpatterns = [\n    path(\"\", views.RecipesListViewHome.as_view(), name=\"home\"),\n    path(\"recipes/search/\", views.RecipesListSearch.as_view(), name=\"search\"),\n    path(\n        \"recipes/category/<int:category_id>/\",",
        "detail": "recipes.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "recipes.urls",
        "description": "recipes.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.RecipesListViewHome.as_view(), name=\"home\"),\n    path(\"recipes/search/\", views.RecipesListSearch.as_view(), name=\"search\"),\n    path(\n        \"recipes/category/<int:category_id>/\",\n        views.RecipesListCategory.as_view(),\n        name=\"category\",\n    ),\n    path(\"recipes/<int:pk>/\", views.RecipeDetailView.as_view(), name=\"recipe\"),\n    path(\"recipes/api/token/\", TokenObtainPairView.as_view(), name=\"token_obtain_pair\"),",
        "detail": "recipes.urls",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"core.settings\")\n    load_dotenv()\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"",
        "detail": "manage",
        "documentation": {}
    }
]